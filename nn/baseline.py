from pathlib import Path
import json
import numpy as np
import argparse
parser = argparse.ArgumentParser()
# parser.add_argument("--runname", help="name this experiment", required=True)
parser.add_argument("--datadir",
                    help="input data dir generated by data/split.py (contains e.g. train.json and train/",
                    required=True)
args = parser.parse_args()

dir = Path(args.datadir)

with open(dir / "train.json") as f:
    train = json.load(f)["data"]

def criterion_rel_error(pred, truth):
    import numpy as torch
    # https://en.wikipedia.org/wiki/Approximation_error
    ret = torch.abs(1 - pred / truth)
    ret[torch.isnan(ret)] = 0 # if truth = 0 relative error is undefined
    return torch.mean(ret)

for key in train[0].keys():
    if key not in ["kcal", "protein", "fat", "carbohydrates", "mass_per_portion"]:
        continue
    kcals = [e[key] for e in train]

    mean = np.mean(kcals)
    std = np.std(kcals)
    print(f"{key} mean: {mean:.1f}")
    print(f"{key} std: {std:.1f}")

    with open(dir / "val.json") as f:
        test = json.load(f)["data"]

    kcals_val = [e[key] for e in test]
    l1_train = np.mean(np.abs(kcals - mean))
    l1_val = np.mean(np.abs(kcals_val - mean))
    rel_val = criterion_rel_error((np.ones_like(kcals_val) * mean), kcals_val)
    print(f"{key} l1_train: {l1_train:.3g}")
    print(f"{key} l1_val: {l1_val:.3g}")
    print(f"{key} rel_error_val {rel_val:.3g}")
